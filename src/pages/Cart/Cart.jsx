import React, { useContext, useState } from "react";
import "./Cart.css";
import { StoreContext } from "../../context/StoreContext";
import { useNavigate } from "react-router-dom";

export const Cart = () => {
  const {
    cartItems,
    food_list,
    combos,
    removeFromCart,
    addToCart,
    updateCartItem,
    getTotalCartAmount,
    clearCart,
    url,
    token,
  } = useContext(StoreContext);
  const navigate = useNavigate();
  const [promoCode, setPromoCode] = useState("");

  const formatVNDSimple = (amount = 0) => (amount || 0).toLocaleString("vi-VN");

  // Gh√©p danh s√°ch m√≥n ƒÉn v√† combo v√†o map
  const allKnown = {};
  food_list.forEach(
    (f) => (allKnown[`food_${f._id}`] = { ...f, type: "food" })
  );
  combos.forEach((c) => (allKnown[`combo_${c._id}`] = { ...c, type: "combo" }));

  const cartKeys = Object.keys(cartItems || {});
  const itemsForRender = cartKeys.map((key) => {
    const qty = cartItems[key] || 0;
    const [type, id] = key.split("_");
    let item = allKnown[key];
    if (!item) {
      item = {
        _id: id,
        name: "S·∫£n ph·∫©m (ch∆∞a t·∫£i)",
        price: 0,
        discountPrice: 0,
        image: null,
        type,
      };
    }
    return { key, item, qty };
  });

  const getImageSrc = (item) => {
    if (!item || !item.image) return `${url}/images/no-image.png`;
    if (item.image.startsWith("http")) return item.image;
    return `${url}/${item.image.replace(/^\/+/, "")}`;
  };

  const onDecrease = (item) => {
    removeFromCart(item._id, item.type || "food", 1);
  };

  const onIncrease = (item) => {
    addToCart(item, 1, item.type || "food");
  };

  const onSetQuantity = (item, newQty) => {
    updateCartItem(item._id, item.type || "food", Number(newQty));
  };

  const handleClearCart = async () => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng kh√¥ng?")) {
      await clearCart();
      alert("üßπ Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a!");
    }
  };

  return (
    <div className="cart">
      <div className="cart-items">
        <div className="cart-items-title">
          <p>S·∫£n ph·∫©m</p>
          <p>T√™n</p>
          <p>Gi√°</p>
          <p>S·ªë l∆∞·ª£ng</p>
          <p>T·ªïng</p>
          <p>X√≥a</p>
        </div>
        <br />
        <hr />

        {itemsForRender.length > 0 ? (
          itemsForRender.map(({ key, item, qty }) => {
            const price = item.discountPrice || item.price || 0;
            return (
              <div key={key}>
                <div className="cart-items-title cart-items-item">
                  <img src={getImageSrc(item)} alt={item.name} />
                  <p>
                    {item.type === "combo" ? `Combo: ${item.name}` : item.name}
                  </p>
                  <p>{formatVNDSimple(price)} VND</p>

                  <div className="qty-controls">
                    <button
                      onClick={() => onDecrease(item)}
                      disabled={qty <= 0}
                    >
                      -
                    </button>
                    <input
                      type="number"
                      min={1}
                      value={qty}
                      onChange={(e) => {
                        const v = Number(e.target.value) || 0;
                        if (v <= 0) updateCartItem(item._id, item.type, 0);
                        else onSetQuantity(item, v);
                      }}
                    />
                    <button onClick={() => onIncrease(item)}>+</button>
                  </div>

                  <p>{formatVNDSimple(price * qty)} VND</p>
                  <p
                    onClick={() => updateCartItem(item._id, item.type, 0)}
                    className="cross"
                  >
                    x
                  </p>
                </div>
                <hr />
              </div>
            );
          })
        ) : (
          <p className="empty-cart">üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
        )}
      </div>

      <div className="cart-bottom">
        <div className="cart-total">
          <h2>T·ªïng ti·ªÅn gi·ªè h√†ng</h2>
          <div>
            <div className="cart-total-details">
              <p>T·ªïng ph·ª•</p>
              <p>{formatVNDSimple(getTotalCartAmount())} VND</p>
            </div>
            <hr />
            <div className="cart-total-details">
              <p>Ph√≠ giao h√†ng</p>
              <p>{getTotalCartAmount() === 0 ? "0 VND" : "30.000 VND"}</p>
            </div>
            <hr />
            <div className="cart-total-details">
              <b>T·ªïng c·ªông</b>
              <b>
                {getTotalCartAmount() === 0
                  ? "0 VND"
                  : formatVNDSimple(getTotalCartAmount() + 30000)}{" "}
                VND
              </b>
            </div>
          </div>

          <div className="cart-buttons">
            <button
              disabled={itemsForRender.length === 0}
              onClick={() => navigate("/order")}
              className="checkout-btn"
            >
              Ti·∫øn h√†nh thanh to√°n
            </button>
            <button
              onClick={handleClearCart}
              className="clear-cart-btn"
              disabled={itemsForRender.length === 0}
            >
              üßπ X√≥a gi·ªè h√†ng
            </button>
          </div>
          <p className="cart-hint">
            {token
              ? "üßç B·∫°n ƒëang d√πng gi·ªè h√†ng c·ªßa t√†i kho·∫£n."
              : "üë§ B·∫°n ƒëang d√πng gi·ªè h√†ng t·∫°m (ch∆∞a ƒëƒÉng nh·∫≠p)."}
          </p>
        </div>

        <div className="cart-promocode">
          <div>
            <p>N·∫øu b·∫°n c√≥ m√£ khuy·∫øn m√£i, h√£y nh·∫≠p v√†o ƒë√¢y</p>
            <div className="cart-promocode-input">
              <input
                type="text"
                placeholder="M√£ khuy·∫øn m√£i"
                value={promoCode}
                onChange={(e) => setPromoCode(e.target.value)}
              />
              <button onClick={() => alert(`M√£ khuy·∫øn m√£i: ${promoCode}`)}>
                G·ª≠i
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
